{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.8.2", "generated_at": "2024-06-21T16:31:42.274603Z", "invocation_id": "02e10821-9af5-4f02-820c-8da049201432", "env": {}}, "results": [{"status": "error", "timing": [{"name": "compile", "started_at": "2024-06-21T16:31:31.685204Z", "completed_at": "2024-06-21T16:31:31.693203Z"}, {"name": "execute", "started_at": "2024-06-21T16:31:31.693203Z", "completed_at": "2024-06-21T16:31:31.782819Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.17147326469421387, "adapter_response": {}, "message": "Runtime Error in model customer_by_country (models\\marts\\customer_by_country.sql)\n  Parser Error: syntax error at or near \";\"", "failures": null, "unique_id": "model.gcp_etl_dbt.customer_by_country", "compiled": true, "compiled_code": "WITH customers AS (\r\n  SELECT\r\n    DISTINCT oi.user_id,\r\n    SUM(CASE WHEN u.gender = 'M' THEN 1 ELSE 0 END) AS male,\r\n    SUM(CASE WHEN u.gender = 'F' THEN 1 ELSE 0 END) AS female,\r\n    u.country AS country\r\n  FROM stg_order_items AS oi\r\n  INNER JOIN stg_users AS u ON oi.user_id = u.id\r\n  WHERE oi.status NOT IN ('Cancelled', 'Returned')\r\n  GROUP BY oi.user_id, u.country\r\n)\r\n\r\nSELECT\r\n  country,\r\n  COUNT(DISTINCT user_id) AS customers_count,\r\n  SUM(female) AS female,\r\n  SUM(male) AS male\r\nFROM customers\r\nGROUP BY country\r\nORDER BY customers_count DESC;", "relation_name": "\"dbt\".\"main\".\"customer_by_country\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-21T16:31:31.860679Z", "completed_at": "2024-06-21T16:31:31.864677Z"}, {"name": "execute", "started_at": "2024-06-21T16:31:31.865677Z", "completed_at": "2024-06-21T16:31:33.124589Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.270266056060791, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.gcp_etl_dbt.stg_distribution_centers", "compiled": true, "compiled_code": "\n\nwith stg_distribution_centers as (\n    select \n        cast(id as int) as id,\n        cast(name as string) as name,\n        cast(latitude as float) as latitude,\n        cast(longitude as float) as longitude\n    from read_parquet('s3://pypi-gcp-duckdb-dbt-197398273774/distribution_centers.parquet')\n)\n\nselect * from stg_distribution_centers", "relation_name": "\"dbt\".\"main\".\"stg_distribution_centers\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-21T16:31:33.133946Z", "completed_at": "2024-06-21T16:31:33.136944Z"}, {"name": "execute", "started_at": "2024-06-21T16:31:33.137946Z", "completed_at": "2024-06-21T16:31:34.600126Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.4719879627227783, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.gcp_etl_dbt.stg_events", "compiled": true, "compiled_code": "\n\nwith stg_events as (\n    select \n        cast(id as int) as event_id,\n        cast(user_id as int) as user_id,\n        cast(sequence_number as int) as sequence_number,\n        cast(session_id as string) as session_id,\n        cast(created_at as timestamp) as created_at,\n        cast(ip_address as string) as ip_address,\n        cast(city as string) as city,\n        cast(state as string) as state,\n        cast(postal_code as string) as postal_code,\n        cast(browser as string) as browser, \n        cast(traffic_source as string) as traffic_source,\n        cast(uri as string) as uri,\n        cast(event_type as string) as event_type\n    \n    from read_parquet('s3://pypi-gcp-duckdb-dbt-197398273774/events.parquet')\n)\n\nselect * from stg_events", "relation_name": "\"dbt\".\"main\".\"stg_events\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-21T16:31:34.609933Z", "completed_at": "2024-06-21T16:31:34.612930Z"}, {"name": "execute", "started_at": "2024-06-21T16:31:34.613934Z", "completed_at": "2024-06-21T16:31:35.867460Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.2640984058380127, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.gcp_etl_dbt.stg_inventory_items", "compiled": true, "compiled_code": "\n\nwith stg_invetory_items as (\n    select \n        cast(id as int) as id,\n        cast(product_id as int) as product_id,\n        cast(created_at as timestamp) as created_at,\n        cast(sold_at as timestamp) as sold_at,\n        cast(cost as float) as cost,\n        cast(product_category as string) as product_category,\n        cast(product_name as string) as product_name,\n        cast(product_brand as string) as product_brand,\n        cast(product_retail_price as float) as product_retail_price,\n        cast(product_department as string) as product_department,\n        cast(product_sku as string) as product_sku,\n        cast(product_distribution_center_id as int) as product_distribution_center_id\n    from read_parquet('s3://pypi-gcp-duckdb-dbt-197398273774/inventory_items.parquet')\n)\n\nselect * from stg_invetory_items", "relation_name": "\"dbt\".\"main\".\"stg_inventory_items\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-21T16:31:35.877759Z", "completed_at": "2024-06-21T16:31:35.881438Z"}, {"name": "execute", "started_at": "2024-06-21T16:31:35.881438Z", "completed_at": "2024-06-21T16:31:37.193818Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.3230786323547363, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.gcp_etl_dbt.stg_order_item", "compiled": true, "compiled_code": "\n\nwith stg_order_items as (\n    select \n        cast(id as int) as id,\n        cast(order_id as int) as order_id,\n        cast(user_id as int) as user_id,\n        cast(product_id as int) as product_id,\n        cast(inventory_item_id as int) as inventory_item_id,\n        cast(status as string) as status,\n        cast(created_at as timestamp) as created_at,\n        cast(shipped_at as timestamp) as shipped_at,\n        cast(delivered_at as timestamp) as delivered_at,\n        cast(returned_at as timestamp) as returned_at,\n        cast(sale_price as float) as sale_price\n    from read_parquet('s3://pypi-gcp-duckdb-dbt-197398273774/order_items.parquet')\n)\n\nselect * from stg_order_items", "relation_name": "\"dbt\".\"main\".\"stg_order_item\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-21T16:31:37.203789Z", "completed_at": "2024-06-21T16:31:37.207786Z"}, {"name": "execute", "started_at": "2024-06-21T16:31:37.208789Z", "completed_at": "2024-06-21T16:31:38.381350Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.1838386058807373, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.gcp_etl_dbt.stg_order_items", "compiled": true, "compiled_code": "\n\nwith stg_order_items as (\n    select \n        cast(id as int) as id,\n        cast(order_id as int) as order_id,\n        cast(user_id as int) as user_id,\n        cast(product_id as int) as product_id,\n        cast(inventory_item_id as int) as inventory_item_id,\n        cast(status as string) as status,\n        cast(created_at as timestamp) as created_at,\n        cast(shipped_at as timestamp) as shipped_at,\n        cast(delivered_at as timestamp) as delivered_at,\n        cast(returned_at as timestamp) as returned_at,\n        cast(sale_price as float) as sale_price\n    from read_parquet('s3://pypi-gcp-duckdb-dbt-197398273774/order_items.parquet')\n)\n\nselect * from stg_order_items", "relation_name": "\"dbt\".\"main\".\"stg_order_items\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-21T16:31:38.391281Z", "completed_at": "2024-06-21T16:31:38.394971Z"}, {"name": "execute", "started_at": "2024-06-21T16:31:38.395491Z", "completed_at": "2024-06-21T16:31:39.622056Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.2364747524261475, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.gcp_etl_dbt.stg_orders", "compiled": true, "compiled_code": "\n\nwith stg_orders as (\n    select \n        cast(order_id as int) as order_id,\n        cast(user_id as int) as user_id,\n        cast(status as string) as status,\n        cast(gender as string) as gender,\n        cast(created_at as timestamp) as created_at,\n        cast(returned_at as timestamp) as returned_at,\n        cast(shipped_at as timestamp) as shipped_at,\n        cast(delivered_at as timestamp) as delivered_at,\n        cast(num_of_item as int) as num_of_item\n\n    from read_parquet('s3://pypi-gcp-duckdb-dbt-197398273774/orders.parquet')\n)\n\nselect * from stg_orders", "relation_name": "\"dbt\".\"main\".\"stg_orders\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-21T16:31:39.630714Z", "completed_at": "2024-06-21T16:31:39.672269Z"}, {"name": "execute", "started_at": "2024-06-21T16:31:39.672269Z", "completed_at": "2024-06-21T16:31:40.928585Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.3038694858551025, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.gcp_etl_dbt.stg_products", "compiled": true, "compiled_code": "\n\nwith stg_products as (\n    select \n        cast(id as int) as product_id,\n        cast(cost as float) as cost,\n        cast(category as string) as category,\n        cast(name as string) as name,\n        cast(brand as string) as brand,\n        cast(retail_price as float) as retail_price,\n        cast(department as string) as department,\n        cast(sku as string) as sku,\n        cast(distribution_center_id as int) as distribution_center_id\n\n    from read_parquet('s3://pypi-gcp-duckdb-dbt-197398273774/products.parquet')\n)\n\nselect * from stg_products", "relation_name": "\"dbt\".\"main\".\"stg_products\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-21T16:31:40.937585Z", "completed_at": "2024-06-21T16:31:40.940583Z"}, {"name": "execute", "started_at": "2024-06-21T16:31:40.940583Z", "completed_at": "2024-06-21T16:31:42.213572Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.2820181846618652, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.gcp_etl_dbt.stg_users", "compiled": true, "compiled_code": "\n\nwith stg_users as (\n    select \n        cast(id as int) as user_id,\n        cast(first_name as string) as first_name,\n        cast(last_name as string) as last_name,\n        cast(email as string) as email,\n        cast(age as int) as age,\n        cast(gender as string) as gender,\n        cast(state as string) as state,\n        cast(street_address as string) as street_address,\n        cast(postal_code as string) as postal_code,\n        cast(city as string) as city,\n        cast(country as string) as country,\n        cast(latitude as float) as latitude,\n        cast(longitude as float) as longitude,\n        cast(traffic_source as string) as traffic_source,\n        cast(created_at as timestamp) as created_at\n\n    from read_parquet('s3://pypi-gcp-duckdb-dbt-197398273774/users.parquet')\n)\n\nselect * from stg_users", "relation_name": "\"dbt\".\"main\".\"stg_users\""}], "elapsed_time": 12.412806987762451, "args": {"strict_mode": false, "project_dir": "C:\\Users\\danie\\python-projects\\gcp-etl-dbt\\transform\\gcp_etl_dbt", "introspect": true, "require_resource_names_without_spaces": false, "macro_debugging": false, "warn_error_options": {"include": [], "exclude": []}, "log_format_file": "debug", "quiet": false, "favor_state": false, "select": [], "use_colors": true, "version_check": true, "write_json": true, "defer": false, "use_colors_file": true, "require_explicit_package_overrides_for_builtin_materializations": true, "printer_width": 80, "static_parser": true, "exclude": [], "populate_cache": true, "partial_parse_file_diff": true, "log_path": "C:\\Users\\danie\\python-projects\\gcp-etl-dbt\\transform\\gcp_etl_dbt\\logs", "empty": false, "log_level": "info", "send_anonymous_usage_stats": true, "source_freshness_run_project_hooks": false, "profiles_dir": "C:\\Users\\danie\\python-projects\\gcp-etl-dbt\\transform\\gcp_etl_dbt", "invocation_command": "dbt run", "log_file_max_bytes": 10485760, "indirect_selection": "eager", "cache_selected_only": false, "log_format": "default", "show_resource_report": false, "log_level_file": "debug", "enable_legacy_logger": false, "vars": {}, "which": "run", "partial_parse": true, "print": true}}