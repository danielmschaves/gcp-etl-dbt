{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.8.2", "generated_at": "2024-07-17T23:40:41.496354Z", "invocation_id": "58cc31e1-d016-4f36-9d17-b6fbcbb099f2", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:40:09.878868Z", "completed_at": "2024-07-17T23:40:09.885867Z"}, {"name": "execute", "started_at": "2024-07-17T23:40:09.885867Z", "completed_at": "2024-07-17T23:40:11.130960Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.259589433670044, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.gcp_etl_dbt.stg_distribution_centers", "compiled": true, "compiled_code": "\n\nwith stg_distribution_centers as (\n    select \n        cast(id as int) as id,\n        cast(name as string) as name,\n        cast(latitude as float) as latitude,\n        cast(longitude as float) as longitude\n    from read_parquet('s3://pypi-gcp-duckdb-dbt-197398273774/distribution_centers.parquet')\n)\n\nselect * from stg_distribution_centers", "relation_name": "\"dbt\".\"main\".\"stg_distribution_centers\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:40:11.142465Z", "completed_at": "2024-07-17T23:40:11.145465Z"}, {"name": "execute", "started_at": "2024-07-17T23:40:11.145465Z", "completed_at": "2024-07-17T23:40:12.535203Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.4000904560089111, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.gcp_etl_dbt.stg_events", "compiled": true, "compiled_code": "\n\nwith stg_events as (\n    select \n        cast(id as int) as event_id,\n        cast(user_id as int) as user_id,\n        cast(sequence_number as int) as sequence_number,\n        cast(session_id as string) as session_id,\n        cast(created_at as timestamp) as created_at,\n        cast(ip_address as string) as ip_address,\n        cast(city as string) as city,\n        cast(state as string) as state,\n        cast(postal_code as string) as postal_code,\n        cast(browser as string) as browser, \n        cast(traffic_source as string) as traffic_source,\n        cast(uri as string) as uri,\n        cast(event_type as string) as event_type\n    \n    from read_parquet('s3://pypi-gcp-duckdb-dbt-197398273774/events.parquet')\n)\n\nselect * from stg_events", "relation_name": "\"dbt\".\"main\".\"stg_events\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:40:12.545655Z", "completed_at": "2024-07-17T23:40:12.549176Z"}, {"name": "execute", "started_at": "2024-07-17T23:40:12.550176Z", "completed_at": "2024-07-17T23:40:13.786636Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.2480037212371826, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.gcp_etl_dbt.stg_inventory_items", "compiled": true, "compiled_code": "\n\nwith stg_invetory_items as (\n    select \n        cast(id as int) as id,\n        cast(product_id as int) as product_id,\n        cast(created_at as timestamp) as created_at,\n        cast(sold_at as timestamp) as sold_at,\n        cast(cost as float) as cost,\n        cast(product_category as string) as product_category,\n        cast(product_name as string) as product_name,\n        cast(product_brand as string) as product_brand,\n        cast(product_retail_price as float) as product_retail_price,\n        cast(product_department as string) as product_department,\n        cast(product_sku as string) as product_sku,\n        cast(product_distribution_center_id as int) as product_distribution_center_id\n    from read_parquet('s3://pypi-gcp-duckdb-dbt-197398273774/inventory_items.parquet')\n)\n\nselect * from stg_invetory_items", "relation_name": "\"dbt\".\"main\".\"stg_inventory_items\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:40:13.797670Z", "completed_at": "2024-07-17T23:40:13.801677Z"}, {"name": "execute", "started_at": "2024-07-17T23:40:13.801677Z", "completed_at": "2024-07-17T23:40:14.975112Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.184960126876831, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.gcp_etl_dbt.stg_order_items", "compiled": true, "compiled_code": "\n\nwith stg_order_items as (\n    select \n        cast(id as int) as order_item_id,\n        cast(order_id as int) as order_id,\n        cast(user_id as int) as user_id,\n        cast(product_id as int) as product_id,\n        cast(inventory_item_id as int) as inventory_item_id,\n        cast(status as string) as status,\n        cast(created_at as timestamp) as created_at,\n        cast(shipped_at as timestamp) as shipped_at,\n        cast(delivered_at as timestamp) as delivered_at,\n        cast(returned_at as timestamp) as returned_at,\n        cast(sale_price as float) as sale_price\n        \n    from read_parquet('s3://pypi-gcp-duckdb-dbt-197398273774/order_items.parquet')\n)\n\nselect * from stg_order_items", "relation_name": "\"dbt\".\"main\".\"stg_order_items\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:40:14.986623Z", "completed_at": "2024-07-17T23:40:14.989689Z"}, {"name": "execute", "started_at": "2024-07-17T23:40:14.989689Z", "completed_at": "2024-07-17T23:40:16.210028Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.230398416519165, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.gcp_etl_dbt.stg_orders", "compiled": true, "compiled_code": "\n\nwith stg_orders as (\n    select \n        cast(order_id as int) as order_id,\n        cast(user_id as int) as user_id,\n        cast(status as string) as status,\n        cast(gender as string) as gender,\n        cast(created_at as timestamp) as created_at,\n        cast(returned_at as timestamp) as returned_at,\n        cast(shipped_at as timestamp) as shipped_at,\n        cast(delivered_at as timestamp) as delivered_at,\n        cast(num_of_item as int) as num_of_item\n\n    from read_parquet('s3://pypi-gcp-duckdb-dbt-197398273774/orders.parquet')\n)\n\nselect * from stg_orders", "relation_name": "\"dbt\".\"main\".\"stg_orders\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:40:16.220542Z", "completed_at": "2024-07-17T23:40:16.223541Z"}, {"name": "execute", "started_at": "2024-07-17T23:40:16.224543Z", "completed_at": "2024-07-17T23:40:17.414629Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.2011160850524902, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.gcp_etl_dbt.stg_products", "compiled": true, "compiled_code": "\n\nwith stg_products as (\n    select \n        cast(id as int) as product_id,\n        cast(cost as float) as cost,\n        cast(category as string) as category,\n        cast(name as string) as name,\n        cast(brand as string) as brand,\n        cast(retail_price as float) as retail_price,\n        cast(department as string) as department,\n        cast(sku as string) as sku,\n        cast(distribution_center_id as int) as distribution_center_id\n\n    from read_parquet('s3://pypi-gcp-duckdb-dbt-197398273774/products.parquet')\n)\n\nselect * from stg_products", "relation_name": "\"dbt\".\"main\".\"stg_products\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:40:17.425660Z", "completed_at": "2024-07-17T23:40:17.428176Z"}, {"name": "execute", "started_at": "2024-07-17T23:40:17.429174Z", "completed_at": "2024-07-17T23:40:19.402621Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.9844684600830078, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.gcp_etl_dbt.stg_users", "compiled": true, "compiled_code": "\n\nwith stg_users as (\n    select \n        cast(id as int) as user_id,\n        cast(first_name as string) as first_name,\n        cast(last_name as string) as last_name,\n        cast(email as string) as email,\n        cast(age as int) as age,\n        cast(gender as string) as gender,\n        cast(state as string) as state,\n        cast(street_address as string) as street_address,\n        cast(postal_code as string) as postal_code,\n        cast(city as string) as city,\n        cast(country as string) as country,\n        cast(latitude as float) as latitude,\n        cast(longitude as float) as longitude,\n        cast(traffic_source as string) as traffic_source,\n        cast(created_at as timestamp) as created_at\n\n    from read_parquet('s3://pypi-gcp-duckdb-dbt-197398273774/users.parquet')\n)\n\nselect * from stg_users", "relation_name": "\"dbt\".\"main\".\"stg_users\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:40:19.414132Z", "completed_at": "2024-07-17T23:40:19.417643Z"}, {"name": "execute", "started_at": "2024-07-17T23:40:19.417643Z", "completed_at": "2024-07-17T23:40:28.380917Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 8.974792242050171, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.gcp_etl_dbt.dim_date", "compiled": true, "compiled_code": "\n\nWITH all_dates AS (\n  SELECT created_at AS date\n  FROM \"dbt\".\"main\".\"stg_orders\"\n  UNION ALL\n  SELECT created_at AS date\n  FROM \"dbt\".\"main\".\"stg_order_items\"\n),\ndate_range AS (\n  SELECT\n    MIN(date) AS min_date,\n    MAX(date) AS max_date\n  FROM all_dates\n),\nfiltered_dates AS (\n  SELECT date\n  FROM all_dates, date_range\n  WHERE date BETWEEN date_range.min_date AND date_range.max_date\n)\nSELECT\n  CONCAT(EXTRACT(YEAR FROM date)::TEXT, \n         LPAD(EXTRACT(MONTH FROM date)::TEXT, 2, '0'), \n         LPAD(EXTRACT(DAY FROM date)::TEXT, 2, '0')) AS date_key,\n  date,\n  EXTRACT(DAY FROM date) AS day,\n  EXTRACT(MONTH FROM date) AS month,\n  EXTRACT(QUARTER FROM date) AS quarter,\n  EXTRACT(YEAR FROM date) AS year,\n  EXTRACT(DOW FROM date) AS day_of_week\nFROM filtered_dates", "relation_name": "\"dbt\".\"main_gold\".\"dim_date\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:40:28.392153Z", "completed_at": "2024-07-17T23:40:28.395153Z"}, {"name": "execute", "started_at": "2024-07-17T23:40:28.395153Z", "completed_at": "2024-07-17T23:40:31.514727Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 3.1330831050872803, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.gcp_etl_dbt.dim_orders", "compiled": true, "compiled_code": "-- model/dim_orders.sql\n\n\n\nwith dim_orders as (\n    select\n        order_id,\n        user_id,\n        status,\n        created_at,\n        shipped_at,\n        delivered_at,\n        returned_at,\n        num_of_item\n    from \"dbt\".\"main\".\"stg_orders\"\n)\n\nselect * from dim_orders", "relation_name": "\"dbt\".\"main_gold\".\"dim_orders\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:40:31.529758Z", "completed_at": "2024-07-17T23:40:31.532758Z"}, {"name": "execute", "started_at": "2024-07-17T23:40:31.533758Z", "completed_at": "2024-07-17T23:40:34.617826Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 3.1287295818328857, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.gcp_etl_dbt.dim_products", "compiled": true, "compiled_code": "\n\nwith dim_products as (\n    select\n        product_id,\n        name,\n        category,\n        brand,\n        department,\n        sku,\n        retail_price\n    from \"dbt\".\"main\".\"stg_products\"\n)\n\nselect * from dim_products", "relation_name": "\"dbt\".\"main_gold\".\"dim_products\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:40:34.662485Z", "completed_at": "2024-07-17T23:40:34.667565Z"}, {"name": "execute", "started_at": "2024-07-17T23:40:34.668565Z", "completed_at": "2024-07-17T23:40:38.130464Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 3.5660951137542725, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.gcp_etl_dbt.dim_users", "compiled": true, "compiled_code": "\n\nwith dim_users as (\n    select\n        user_id,\n        first_name,\n        last_name,\n        email,\n        age,\n        gender,\n        city,\n        state,\n        country,\n        traffic_source\n    from \"dbt\".\"main\".\"stg_users\"\n)\n\nselect * from dim_users", "relation_name": "\"dbt\".\"main_gold\".\"dim_users\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:40:38.232583Z", "completed_at": "2024-07-17T23:40:38.238097Z"}, {"name": "execute", "started_at": "2024-07-17T23:40:38.238097Z", "completed_at": "2024-07-17T23:40:41.431363Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 3.2062981128692627, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.gcp_etl_dbt.fact_order_items", "compiled": true, "compiled_code": "WITH order_items AS (\n    SELECT * FROM \"dbt\".\"main\".\"stg_order_items\"\n),\n\norder_facts AS (\n    SELECT\n        oi.order_item_id,\n        oi.order_id,\n        oi.product_id,\n        o.user_id,\n        o.num_of_item, \n        \n  -- Example implementation, adjust based on actual logic\n  CAST(o.created_at AS VARCHAR)\n AS order_date_key,\n        \n  -- Example implementation, adjust based on actual logic\n  CAST(o.shipped_at AS VARCHAR)\n AS shipped_date_key,\n        \n  -- Example implementation, adjust based on actual logic\n  CAST(o.delivered_at AS VARCHAR)\n AS delivered_date_key,\n        \n  -- Example implementation, adjust based on actual logic\n  CAST(o.returned_at AS VARCHAR)\n AS returned_date_key,\n        oi.sale_price\n    FROM order_items oi\n    JOIN \"dbt\".\"main_gold\".\"dim_orders\" o ON oi.order_id = o.order_id\n    JOIN \"dbt\".\"main_gold\".\"dim_users\" u ON o.user_id = u.user_id\n    JOIN \"dbt\".\"main_gold\".\"dim_products\" p ON oi.product_id = p.product_id\n)\n\nSELECT\n    order_item_id,\n    order_id,\n    product_id,\n    user_id,\n    num_of_item,\n    d_order.date_key AS order_date_key,\n    d_shipped.date_key AS shipped_date_key,\n    d_delivered.date_key AS delivered_date_key,\n    d_returned.date_key AS returned_date_key,\n    sale_price\nFROM order_facts\nJOIN \"dbt\".\"main_gold\".\"dim_date\" d_order ON order_facts.order_date_key = d_order.date_key\nLEFT JOIN \"dbt\".\"main_gold\".\"dim_date\" d_shipped ON order_facts.shipped_date_key = d_shipped.date_key\nLEFT JOIN \"dbt\".\"main_gold\".\"dim_date\" d_delivered ON order_facts.delivered_date_key = d_delivered.date_key\nLEFT JOIN \"dbt\".\"main_gold\".\"dim_date\" d_returned ON order_facts.returned_date_key = d_returned.date_key", "relation_name": "\"dbt\".\"main\".\"fact_order_items\""}], "elapsed_time": 32.10517621040344, "args": {"log_level": "info", "partial_parse": true, "source_freshness_run_project_hooks": false, "project_dir": "C:\\Users\\danie\\python-projects\\gcp-etl-dbt\\transform\\gcp_etl_dbt", "show_resource_report": false, "introspect": true, "use_colors": true, "exclude": [], "require_resource_names_without_spaces": false, "vars": {}, "enable_legacy_logger": false, "invocation_command": "dbt run", "version_check": true, "static_parser": true, "printer_width": 80, "empty": false, "favor_state": false, "log_level_file": "debug", "warn_error_options": {"include": [], "exclude": []}, "require_explicit_package_overrides_for_builtin_materializations": true, "log_path": "C:\\Users\\danie\\python-projects\\gcp-etl-dbt\\transform\\gcp_etl_dbt\\logs", "write_json": true, "log_format_file": "debug", "send_anonymous_usage_stats": true, "quiet": false, "which": "run", "populate_cache": true, "indirect_selection": "eager", "log_file_max_bytes": 10485760, "target": "dev", "log_format": "default", "partial_parse_file_diff": true, "use_colors_file": true, "select": [], "defer": false, "macro_debugging": false, "cache_selected_only": false, "strict_mode": false, "print": true, "profiles_dir": "C:\\Users\\danie\\python-projects\\gcp-etl-dbt\\transform\\gcp_etl_dbt"}}